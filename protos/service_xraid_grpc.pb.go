// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: service_xraid.proto

package xiraid_exporter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XRAIDServiceClient is the client API for XRAIDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XRAIDServiceClient interface {
	// *
	// Apply the configuration file for all restoring RAIDs.
	ConfigApply(ctx context.Context, in *ConfigApply, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Save the current configuration file.
	ConfigBackup(ctx context.Context, in *ConfigBackup, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Restore the configuration file from a file or from the drives.
	ConfigRestore(ctx context.Context, in *ConfigRestore, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show configuration files stored on the drives.
	ConfigShow(ctx context.Context, in *ConfigShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Delete the metadata and reset the error counter from the drives.
	DriveClean(ctx context.Context, in *DriveClean, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Reset the current numbers of faults for drives.
	DriveFaultyCountReset(ctx context.Context, in *DriveFaultyCountReset, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show the current numbers of faults for drives.
	DriveFaultyCountShow(ctx context.Context, in *DriveFaultyCountShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Manage the drive LED indication.
	DriveLocate(ctx context.Context, in *DriveLocate, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Delete the current license.
	LicenseDelete(ctx context.Context, in *LicenseDelete, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show info on the current license.
	LicenseShow(ctx context.Context, in *LicenseShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Update the current license.
	LicenseUpdate(ctx context.Context, in *LicenseUpdate, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Collect the event log entries into a .tar.gz file.
	LogCollect(ctx context.Context, in *LogCollect, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show the last entries in the event log.
	LogShow(ctx context.Context, in *LogShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Add the recipient's email and notification level.
	MailAdd(ctx context.Context, in *MailAdd, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Remove the email from the list of notification recipients.
	MailRemove(ctx context.Context, in *MailRemove, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show the list of email notification recipients.
	MailShow(ctx context.Context, in *MailShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Add drives to the spare pool.
	PoolAdd(ctx context.Context, in *PoolAdd, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Create the spare pool.
	PoolCreate(ctx context.Context, in *PoolCreate, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Delete the spare pool.
	PoolDelete(ctx context.Context, in *PoolDelete, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Remove drives from the spare pool.
	PoolRemove(ctx context.Context, in *PoolRemove, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show info on the spare pool.
	PoolShow(ctx context.Context, in *PoolShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Create the RAID.
	RaidCreate(ctx context.Context, in *RaidCreate, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Delete the RAID without possibility to restore the RAID and data on it.
	RaidDestroy(ctx context.Context, in *RaidDestroy, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Import the RAID from drive metadata.
	RaidImportApply(ctx context.Context, in *RaidImportApply, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show info about the RAIDs that can be imported from the drives.
	RaidImportShow(ctx context.Context, in *RaidImportShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Start or continue the RAID initialization.
	RaidInitStart(ctx context.Context, in *RaidInitStart, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Stop the RAID initialization.
	RaidInitStop(ctx context.Context, in *RaidInitStop, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Modify the parameters of the created RAID.
	RaidModify(ctx context.Context, in *RaidModify, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Start the RAID reconstruction.
	RaidReconStart(ctx context.Context, in *RaidReconStart, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Stop the RAID reconstruction.
	RaidReconStop(ctx context.Context, in *RaidReconStop, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Replace or remove the drive from the RAID.
	RaidReplace(ctx context.Context, in *RaidReplace, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Change the RAID size.
	RaidResize(ctx context.Context, in *RaidResize, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Restore the RAID from the configuration file.
	RaidRestore(ctx context.Context, in *RaidRestore, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Start the RAID restripe.
	RaidRestripeStart(ctx context.Context, in *RaidRestripeStart, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Continue the RAID restripe.
	RaidRestripeContinue(ctx context.Context, in *RaidRestripeContinue, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Pause the RAID restripe.
	RaidRestripeStop(ctx context.Context, in *RaidRestripeStop, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show info about the RAID.
	RaidShow(ctx context.Context, in *RaidShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Remove (unload) the RAID with possibility to restore the RAID
	// and save data on it.
	RaidUnload(ctx context.Context, in *RaidUnload, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Modify the connection settings.
	SettingsAuthModify(ctx context.Context, in *SettingsAuthModify, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show the connection settings.
	SettingsAuthShow(ctx context.Context, in *SettingsAuthShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Manage the threshold value of I/O errors for all drives.
	SettingsFaultyCountModify(ctx context.Context, in *SettingsFaultyCountModify, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show the threshold value of I/O errors for all drives.
	SettingsFaultyCountShow(ctx context.Context, in *SettingsFaultyCountShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Manage logging settings.
	SettingsLogModify(ctx context.Context, in *SettingsLogModify, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show logging settings.
	SettingsLogShow(ctx context.Context, in *SettingsLogShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Manage email notification settings.
	SettingsMailModify(ctx context.Context, in *SettingsMailModify, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show email notification settings.
	SettingsMailShow(ctx context.Context, in *SettingsMailShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Manage the spare pool settings.
	SettingsPoolModify(ctx context.Context, in *SettingsPoolModify, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show the spare pool settings.
	SettingsPoolShow(ctx context.Context, in *SettingsPoolShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Manage RAID monitoring.
	SettingsScannerModify(ctx context.Context, in *SettingsScannerModify, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show RAID monitoring parameters.
	SettingsScannerShow(ctx context.Context, in *SettingsScannerShow, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Manage cluster settings.
	SettingsClusterModify(ctx context.Context, in *SettingsClusterModify, opts ...grpc.CallOption) (*ResponseMessage, error)
	// *
	// Show cluster settings.
	SettingsClusterShow(ctx context.Context, in *SettingsClusterShow, opts ...grpc.CallOption) (*ResponseMessage, error)
}

type xRAIDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXRAIDServiceClient(cc grpc.ClientConnInterface) XRAIDServiceClient {
	return &xRAIDServiceClient{cc}
}

func (c *xRAIDServiceClient) ConfigApply(ctx context.Context, in *ConfigApply, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/config_apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) ConfigBackup(ctx context.Context, in *ConfigBackup, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/config_backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) ConfigRestore(ctx context.Context, in *ConfigRestore, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/config_restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) ConfigShow(ctx context.Context, in *ConfigShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/config_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) DriveClean(ctx context.Context, in *DriveClean, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/drive_clean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) DriveFaultyCountReset(ctx context.Context, in *DriveFaultyCountReset, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/drive_faulty_count_reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) DriveFaultyCountShow(ctx context.Context, in *DriveFaultyCountShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/drive_faulty_count_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) DriveLocate(ctx context.Context, in *DriveLocate, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/drive_locate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) LicenseDelete(ctx context.Context, in *LicenseDelete, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/license_delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) LicenseShow(ctx context.Context, in *LicenseShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/license_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) LicenseUpdate(ctx context.Context, in *LicenseUpdate, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/license_update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) LogCollect(ctx context.Context, in *LogCollect, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/log_collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) LogShow(ctx context.Context, in *LogShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/log_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) MailAdd(ctx context.Context, in *MailAdd, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/mail_add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) MailRemove(ctx context.Context, in *MailRemove, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/mail_remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) MailShow(ctx context.Context, in *MailShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/mail_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) PoolAdd(ctx context.Context, in *PoolAdd, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/pool_add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) PoolCreate(ctx context.Context, in *PoolCreate, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/pool_create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) PoolDelete(ctx context.Context, in *PoolDelete, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/pool_delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) PoolRemove(ctx context.Context, in *PoolRemove, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/pool_remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) PoolShow(ctx context.Context, in *PoolShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/pool_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidCreate(ctx context.Context, in *RaidCreate, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidDestroy(ctx context.Context, in *RaidDestroy, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidImportApply(ctx context.Context, in *RaidImportApply, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_import_apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidImportShow(ctx context.Context, in *RaidImportShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_import_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidInitStart(ctx context.Context, in *RaidInitStart, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_init_start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidInitStop(ctx context.Context, in *RaidInitStop, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_init_stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidModify(ctx context.Context, in *RaidModify, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidReconStart(ctx context.Context, in *RaidReconStart, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_recon_start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidReconStop(ctx context.Context, in *RaidReconStop, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_recon_stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidReplace(ctx context.Context, in *RaidReplace, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_replace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidResize(ctx context.Context, in *RaidResize, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_resize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidRestore(ctx context.Context, in *RaidRestore, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidRestripeStart(ctx context.Context, in *RaidRestripeStart, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_restripe_start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidRestripeContinue(ctx context.Context, in *RaidRestripeContinue, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_restripe_continue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidRestripeStop(ctx context.Context, in *RaidRestripeStop, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_restripe_stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidShow(ctx context.Context, in *RaidShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) RaidUnload(ctx context.Context, in *RaidUnload, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/raid_unload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsAuthModify(ctx context.Context, in *SettingsAuthModify, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_auth_modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsAuthShow(ctx context.Context, in *SettingsAuthShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_auth_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsFaultyCountModify(ctx context.Context, in *SettingsFaultyCountModify, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_faulty_count_modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsFaultyCountShow(ctx context.Context, in *SettingsFaultyCountShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_faulty_count_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsLogModify(ctx context.Context, in *SettingsLogModify, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_log_modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsLogShow(ctx context.Context, in *SettingsLogShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_log_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsMailModify(ctx context.Context, in *SettingsMailModify, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_mail_modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsMailShow(ctx context.Context, in *SettingsMailShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_mail_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsPoolModify(ctx context.Context, in *SettingsPoolModify, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_pool_modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsPoolShow(ctx context.Context, in *SettingsPoolShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_pool_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsScannerModify(ctx context.Context, in *SettingsScannerModify, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_scanner_modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsScannerShow(ctx context.Context, in *SettingsScannerShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_scanner_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsClusterModify(ctx context.Context, in *SettingsClusterModify, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_cluster_modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRAIDServiceClient) SettingsClusterShow(ctx context.Context, in *SettingsClusterShow, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/xraid.v2.XRAIDService/settings_cluster_show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XRAIDServiceServer is the server API for XRAIDService service.
// All implementations must embed UnimplementedXRAIDServiceServer
// for forward compatibility
type XRAIDServiceServer interface {
	// *
	// Apply the configuration file for all restoring RAIDs.
	ConfigApply(context.Context, *ConfigApply) (*ResponseMessage, error)
	// *
	// Save the current configuration file.
	ConfigBackup(context.Context, *ConfigBackup) (*ResponseMessage, error)
	// *
	// Restore the configuration file from a file or from the drives.
	ConfigRestore(context.Context, *ConfigRestore) (*ResponseMessage, error)
	// *
	// Show configuration files stored on the drives.
	ConfigShow(context.Context, *ConfigShow) (*ResponseMessage, error)
	// *
	// Delete the metadata and reset the error counter from the drives.
	DriveClean(context.Context, *DriveClean) (*ResponseMessage, error)
	// *
	// Reset the current numbers of faults for drives.
	DriveFaultyCountReset(context.Context, *DriveFaultyCountReset) (*ResponseMessage, error)
	// *
	// Show the current numbers of faults for drives.
	DriveFaultyCountShow(context.Context, *DriveFaultyCountShow) (*ResponseMessage, error)
	// *
	// Manage the drive LED indication.
	DriveLocate(context.Context, *DriveLocate) (*ResponseMessage, error)
	// *
	// Delete the current license.
	LicenseDelete(context.Context, *LicenseDelete) (*ResponseMessage, error)
	// *
	// Show info on the current license.
	LicenseShow(context.Context, *LicenseShow) (*ResponseMessage, error)
	// *
	// Update the current license.
	LicenseUpdate(context.Context, *LicenseUpdate) (*ResponseMessage, error)
	// *
	// Collect the event log entries into a .tar.gz file.
	LogCollect(context.Context, *LogCollect) (*ResponseMessage, error)
	// *
	// Show the last entries in the event log.
	LogShow(context.Context, *LogShow) (*ResponseMessage, error)
	// *
	// Add the recipient's email and notification level.
	MailAdd(context.Context, *MailAdd) (*ResponseMessage, error)
	// *
	// Remove the email from the list of notification recipients.
	MailRemove(context.Context, *MailRemove) (*ResponseMessage, error)
	// *
	// Show the list of email notification recipients.
	MailShow(context.Context, *MailShow) (*ResponseMessage, error)
	// *
	// Add drives to the spare pool.
	PoolAdd(context.Context, *PoolAdd) (*ResponseMessage, error)
	// *
	// Create the spare pool.
	PoolCreate(context.Context, *PoolCreate) (*ResponseMessage, error)
	// *
	// Delete the spare pool.
	PoolDelete(context.Context, *PoolDelete) (*ResponseMessage, error)
	// *
	// Remove drives from the spare pool.
	PoolRemove(context.Context, *PoolRemove) (*ResponseMessage, error)
	// *
	// Show info on the spare pool.
	PoolShow(context.Context, *PoolShow) (*ResponseMessage, error)
	// *
	// Create the RAID.
	RaidCreate(context.Context, *RaidCreate) (*ResponseMessage, error)
	// *
	// Delete the RAID without possibility to restore the RAID and data on it.
	RaidDestroy(context.Context, *RaidDestroy) (*ResponseMessage, error)
	// *
	// Import the RAID from drive metadata.
	RaidImportApply(context.Context, *RaidImportApply) (*ResponseMessage, error)
	// *
	// Show info about the RAIDs that can be imported from the drives.
	RaidImportShow(context.Context, *RaidImportShow) (*ResponseMessage, error)
	// *
	// Start or continue the RAID initialization.
	RaidInitStart(context.Context, *RaidInitStart) (*ResponseMessage, error)
	// *
	// Stop the RAID initialization.
	RaidInitStop(context.Context, *RaidInitStop) (*ResponseMessage, error)
	// *
	// Modify the parameters of the created RAID.
	RaidModify(context.Context, *RaidModify) (*ResponseMessage, error)
	// *
	// Start the RAID reconstruction.
	RaidReconStart(context.Context, *RaidReconStart) (*ResponseMessage, error)
	// *
	// Stop the RAID reconstruction.
	RaidReconStop(context.Context, *RaidReconStop) (*ResponseMessage, error)
	// *
	// Replace or remove the drive from the RAID.
	RaidReplace(context.Context, *RaidReplace) (*ResponseMessage, error)
	// *
	// Change the RAID size.
	RaidResize(context.Context, *RaidResize) (*ResponseMessage, error)
	// *
	// Restore the RAID from the configuration file.
	RaidRestore(context.Context, *RaidRestore) (*ResponseMessage, error)
	// *
	// Start the RAID restripe.
	RaidRestripeStart(context.Context, *RaidRestripeStart) (*ResponseMessage, error)
	// *
	// Continue the RAID restripe.
	RaidRestripeContinue(context.Context, *RaidRestripeContinue) (*ResponseMessage, error)
	// *
	// Pause the RAID restripe.
	RaidRestripeStop(context.Context, *RaidRestripeStop) (*ResponseMessage, error)
	// *
	// Show info about the RAID.
	RaidShow(context.Context, *RaidShow) (*ResponseMessage, error)
	// *
	// Remove (unload) the RAID with possibility to restore the RAID
	// and save data on it.
	RaidUnload(context.Context, *RaidUnload) (*ResponseMessage, error)
	// *
	// Modify the connection settings.
	SettingsAuthModify(context.Context, *SettingsAuthModify) (*ResponseMessage, error)
	// *
	// Show the connection settings.
	SettingsAuthShow(context.Context, *SettingsAuthShow) (*ResponseMessage, error)
	// *
	// Manage the threshold value of I/O errors for all drives.
	SettingsFaultyCountModify(context.Context, *SettingsFaultyCountModify) (*ResponseMessage, error)
	// *
	// Show the threshold value of I/O errors for all drives.
	SettingsFaultyCountShow(context.Context, *SettingsFaultyCountShow) (*ResponseMessage, error)
	// *
	// Manage logging settings.
	SettingsLogModify(context.Context, *SettingsLogModify) (*ResponseMessage, error)
	// *
	// Show logging settings.
	SettingsLogShow(context.Context, *SettingsLogShow) (*ResponseMessage, error)
	// *
	// Manage email notification settings.
	SettingsMailModify(context.Context, *SettingsMailModify) (*ResponseMessage, error)
	// *
	// Show email notification settings.
	SettingsMailShow(context.Context, *SettingsMailShow) (*ResponseMessage, error)
	// *
	// Manage the spare pool settings.
	SettingsPoolModify(context.Context, *SettingsPoolModify) (*ResponseMessage, error)
	// *
	// Show the spare pool settings.
	SettingsPoolShow(context.Context, *SettingsPoolShow) (*ResponseMessage, error)
	// *
	// Manage RAID monitoring.
	SettingsScannerModify(context.Context, *SettingsScannerModify) (*ResponseMessage, error)
	// *
	// Show RAID monitoring parameters.
	SettingsScannerShow(context.Context, *SettingsScannerShow) (*ResponseMessage, error)
	// *
	// Manage cluster settings.
	SettingsClusterModify(context.Context, *SettingsClusterModify) (*ResponseMessage, error)
	// *
	// Show cluster settings.
	SettingsClusterShow(context.Context, *SettingsClusterShow) (*ResponseMessage, error)
	mustEmbedUnimplementedXRAIDServiceServer()
}

// UnimplementedXRAIDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedXRAIDServiceServer struct {
}

func (UnimplementedXRAIDServiceServer) ConfigApply(context.Context, *ConfigApply) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigApply not implemented")
}
func (UnimplementedXRAIDServiceServer) ConfigBackup(context.Context, *ConfigBackup) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigBackup not implemented")
}
func (UnimplementedXRAIDServiceServer) ConfigRestore(context.Context, *ConfigRestore) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigRestore not implemented")
}
func (UnimplementedXRAIDServiceServer) ConfigShow(context.Context, *ConfigShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigShow not implemented")
}
func (UnimplementedXRAIDServiceServer) DriveClean(context.Context, *DriveClean) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriveClean not implemented")
}
func (UnimplementedXRAIDServiceServer) DriveFaultyCountReset(context.Context, *DriveFaultyCountReset) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriveFaultyCountReset not implemented")
}
func (UnimplementedXRAIDServiceServer) DriveFaultyCountShow(context.Context, *DriveFaultyCountShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriveFaultyCountShow not implemented")
}
func (UnimplementedXRAIDServiceServer) DriveLocate(context.Context, *DriveLocate) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriveLocate not implemented")
}
func (UnimplementedXRAIDServiceServer) LicenseDelete(context.Context, *LicenseDelete) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LicenseDelete not implemented")
}
func (UnimplementedXRAIDServiceServer) LicenseShow(context.Context, *LicenseShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LicenseShow not implemented")
}
func (UnimplementedXRAIDServiceServer) LicenseUpdate(context.Context, *LicenseUpdate) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LicenseUpdate not implemented")
}
func (UnimplementedXRAIDServiceServer) LogCollect(context.Context, *LogCollect) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogCollect not implemented")
}
func (UnimplementedXRAIDServiceServer) LogShow(context.Context, *LogShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogShow not implemented")
}
func (UnimplementedXRAIDServiceServer) MailAdd(context.Context, *MailAdd) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MailAdd not implemented")
}
func (UnimplementedXRAIDServiceServer) MailRemove(context.Context, *MailRemove) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MailRemove not implemented")
}
func (UnimplementedXRAIDServiceServer) MailShow(context.Context, *MailShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MailShow not implemented")
}
func (UnimplementedXRAIDServiceServer) PoolAdd(context.Context, *PoolAdd) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolAdd not implemented")
}
func (UnimplementedXRAIDServiceServer) PoolCreate(context.Context, *PoolCreate) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolCreate not implemented")
}
func (UnimplementedXRAIDServiceServer) PoolDelete(context.Context, *PoolDelete) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDelete not implemented")
}
func (UnimplementedXRAIDServiceServer) PoolRemove(context.Context, *PoolRemove) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolRemove not implemented")
}
func (UnimplementedXRAIDServiceServer) PoolShow(context.Context, *PoolShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolShow not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidCreate(context.Context, *RaidCreate) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidCreate not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidDestroy(context.Context, *RaidDestroy) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidDestroy not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidImportApply(context.Context, *RaidImportApply) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidImportApply not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidImportShow(context.Context, *RaidImportShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidImportShow not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidInitStart(context.Context, *RaidInitStart) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidInitStart not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidInitStop(context.Context, *RaidInitStop) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidInitStop not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidModify(context.Context, *RaidModify) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidModify not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidReconStart(context.Context, *RaidReconStart) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidReconStart not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidReconStop(context.Context, *RaidReconStop) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidReconStop not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidReplace(context.Context, *RaidReplace) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidReplace not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidResize(context.Context, *RaidResize) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidResize not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidRestore(context.Context, *RaidRestore) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidRestore not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidRestripeStart(context.Context, *RaidRestripeStart) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidRestripeStart not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidRestripeContinue(context.Context, *RaidRestripeContinue) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidRestripeContinue not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidRestripeStop(context.Context, *RaidRestripeStop) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidRestripeStop not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidShow(context.Context, *RaidShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidShow not implemented")
}
func (UnimplementedXRAIDServiceServer) RaidUnload(context.Context, *RaidUnload) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidUnload not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsAuthModify(context.Context, *SettingsAuthModify) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsAuthModify not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsAuthShow(context.Context, *SettingsAuthShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsAuthShow not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsFaultyCountModify(context.Context, *SettingsFaultyCountModify) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsFaultyCountModify not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsFaultyCountShow(context.Context, *SettingsFaultyCountShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsFaultyCountShow not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsLogModify(context.Context, *SettingsLogModify) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsLogModify not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsLogShow(context.Context, *SettingsLogShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsLogShow not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsMailModify(context.Context, *SettingsMailModify) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsMailModify not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsMailShow(context.Context, *SettingsMailShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsMailShow not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsPoolModify(context.Context, *SettingsPoolModify) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsPoolModify not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsPoolShow(context.Context, *SettingsPoolShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsPoolShow not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsScannerModify(context.Context, *SettingsScannerModify) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsScannerModify not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsScannerShow(context.Context, *SettingsScannerShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsScannerShow not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsClusterModify(context.Context, *SettingsClusterModify) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsClusterModify not implemented")
}
func (UnimplementedXRAIDServiceServer) SettingsClusterShow(context.Context, *SettingsClusterShow) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsClusterShow not implemented")
}
func (UnimplementedXRAIDServiceServer) mustEmbedUnimplementedXRAIDServiceServer() {}

// UnsafeXRAIDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XRAIDServiceServer will
// result in compilation errors.
type UnsafeXRAIDServiceServer interface {
	mustEmbedUnimplementedXRAIDServiceServer()
}

func RegisterXRAIDServiceServer(s grpc.ServiceRegistrar, srv XRAIDServiceServer) {
	s.RegisterService(&XRAIDService_ServiceDesc, srv)
}

func _XRAIDService_ConfigApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).ConfigApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/config_apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).ConfigApply(ctx, req.(*ConfigApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_ConfigBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigBackup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).ConfigBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/config_backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).ConfigBackup(ctx, req.(*ConfigBackup))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_ConfigRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRestore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).ConfigRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/config_restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).ConfigRestore(ctx, req.(*ConfigRestore))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_ConfigShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).ConfigShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/config_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).ConfigShow(ctx, req.(*ConfigShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_DriveClean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriveClean)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).DriveClean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/drive_clean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).DriveClean(ctx, req.(*DriveClean))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_DriveFaultyCountReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriveFaultyCountReset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).DriveFaultyCountReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/drive_faulty_count_reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).DriveFaultyCountReset(ctx, req.(*DriveFaultyCountReset))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_DriveFaultyCountShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriveFaultyCountShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).DriveFaultyCountShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/drive_faulty_count_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).DriveFaultyCountShow(ctx, req.(*DriveFaultyCountShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_DriveLocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriveLocate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).DriveLocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/drive_locate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).DriveLocate(ctx, req.(*DriveLocate))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_LicenseDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).LicenseDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/license_delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).LicenseDelete(ctx, req.(*LicenseDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_LicenseShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).LicenseShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/license_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).LicenseShow(ctx, req.(*LicenseShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_LicenseUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).LicenseUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/license_update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).LicenseUpdate(ctx, req.(*LicenseUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_LogCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogCollect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).LogCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/log_collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).LogCollect(ctx, req.(*LogCollect))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_LogShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).LogShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/log_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).LogShow(ctx, req.(*LogShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_MailAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).MailAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/mail_add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).MailAdd(ctx, req.(*MailAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_MailRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).MailRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/mail_remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).MailRemove(ctx, req.(*MailRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_MailShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).MailShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/mail_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).MailShow(ctx, req.(*MailShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_PoolAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).PoolAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/pool_add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).PoolAdd(ctx, req.(*PoolAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_PoolCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).PoolCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/pool_create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).PoolCreate(ctx, req.(*PoolCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_PoolDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).PoolDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/pool_delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).PoolDelete(ctx, req.(*PoolDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_PoolRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).PoolRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/pool_remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).PoolRemove(ctx, req.(*PoolRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_PoolShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).PoolShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/pool_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).PoolShow(ctx, req.(*PoolShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidCreate(ctx, req.(*RaidCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidDestroy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidDestroy(ctx, req.(*RaidDestroy))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidImportApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidImportApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidImportApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_import_apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidImportApply(ctx, req.(*RaidImportApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidImportShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidImportShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidImportShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_import_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidImportShow(ctx, req.(*RaidImportShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidInitStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidInitStart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidInitStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_init_start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidInitStart(ctx, req.(*RaidInitStart))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidInitStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidInitStop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidInitStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_init_stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidInitStop(ctx, req.(*RaidInitStop))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidModify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidModify(ctx, req.(*RaidModify))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidReconStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidReconStart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidReconStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_recon_start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidReconStart(ctx, req.(*RaidReconStart))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidReconStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidReconStop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidReconStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_recon_stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidReconStop(ctx, req.(*RaidReconStop))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidReplace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidReplace(ctx, req.(*RaidReplace))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidResize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidResize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_resize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidResize(ctx, req.(*RaidResize))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidRestore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidRestore(ctx, req.(*RaidRestore))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidRestripeStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidRestripeStart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidRestripeStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_restripe_start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidRestripeStart(ctx, req.(*RaidRestripeStart))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidRestripeContinue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidRestripeContinue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidRestripeContinue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_restripe_continue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidRestripeContinue(ctx, req.(*RaidRestripeContinue))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidRestripeStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidRestripeStop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidRestripeStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_restripe_stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidRestripeStop(ctx, req.(*RaidRestripeStop))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidShow(ctx, req.(*RaidShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_RaidUnload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidUnload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).RaidUnload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/raid_unload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).RaidUnload(ctx, req.(*RaidUnload))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsAuthModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsAuthModify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsAuthModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_auth_modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsAuthModify(ctx, req.(*SettingsAuthModify))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsAuthShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsAuthShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsAuthShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_auth_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsAuthShow(ctx, req.(*SettingsAuthShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsFaultyCountModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsFaultyCountModify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsFaultyCountModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_faulty_count_modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsFaultyCountModify(ctx, req.(*SettingsFaultyCountModify))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsFaultyCountShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsFaultyCountShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsFaultyCountShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_faulty_count_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsFaultyCountShow(ctx, req.(*SettingsFaultyCountShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsLogModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsLogModify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsLogModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_log_modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsLogModify(ctx, req.(*SettingsLogModify))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsLogShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsLogShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsLogShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_log_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsLogShow(ctx, req.(*SettingsLogShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsMailModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsMailModify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsMailModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_mail_modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsMailModify(ctx, req.(*SettingsMailModify))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsMailShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsMailShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsMailShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_mail_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsMailShow(ctx, req.(*SettingsMailShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsPoolModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsPoolModify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsPoolModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_pool_modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsPoolModify(ctx, req.(*SettingsPoolModify))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsPoolShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsPoolShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsPoolShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_pool_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsPoolShow(ctx, req.(*SettingsPoolShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsScannerModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsScannerModify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsScannerModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_scanner_modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsScannerModify(ctx, req.(*SettingsScannerModify))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsScannerShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsScannerShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsScannerShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_scanner_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsScannerShow(ctx, req.(*SettingsScannerShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsClusterModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsClusterModify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsClusterModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_cluster_modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsClusterModify(ctx, req.(*SettingsClusterModify))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRAIDService_SettingsClusterShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsClusterShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRAIDServiceServer).SettingsClusterShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xraid.v2.XRAIDService/settings_cluster_show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRAIDServiceServer).SettingsClusterShow(ctx, req.(*SettingsClusterShow))
	}
	return interceptor(ctx, in, info, handler)
}

// XRAIDService_ServiceDesc is the grpc.ServiceDesc for XRAIDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XRAIDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xraid.v2.XRAIDService",
	HandlerType: (*XRAIDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "config_apply",
			Handler:    _XRAIDService_ConfigApply_Handler,
		},
		{
			MethodName: "config_backup",
			Handler:    _XRAIDService_ConfigBackup_Handler,
		},
		{
			MethodName: "config_restore",
			Handler:    _XRAIDService_ConfigRestore_Handler,
		},
		{
			MethodName: "config_show",
			Handler:    _XRAIDService_ConfigShow_Handler,
		},
		{
			MethodName: "drive_clean",
			Handler:    _XRAIDService_DriveClean_Handler,
		},
		{
			MethodName: "drive_faulty_count_reset",
			Handler:    _XRAIDService_DriveFaultyCountReset_Handler,
		},
		{
			MethodName: "drive_faulty_count_show",
			Handler:    _XRAIDService_DriveFaultyCountShow_Handler,
		},
		{
			MethodName: "drive_locate",
			Handler:    _XRAIDService_DriveLocate_Handler,
		},
		{
			MethodName: "license_delete",
			Handler:    _XRAIDService_LicenseDelete_Handler,
		},
		{
			MethodName: "license_show",
			Handler:    _XRAIDService_LicenseShow_Handler,
		},
		{
			MethodName: "license_update",
			Handler:    _XRAIDService_LicenseUpdate_Handler,
		},
		{
			MethodName: "log_collect",
			Handler:    _XRAIDService_LogCollect_Handler,
		},
		{
			MethodName: "log_show",
			Handler:    _XRAIDService_LogShow_Handler,
		},
		{
			MethodName: "mail_add",
			Handler:    _XRAIDService_MailAdd_Handler,
		},
		{
			MethodName: "mail_remove",
			Handler:    _XRAIDService_MailRemove_Handler,
		},
		{
			MethodName: "mail_show",
			Handler:    _XRAIDService_MailShow_Handler,
		},
		{
			MethodName: "pool_add",
			Handler:    _XRAIDService_PoolAdd_Handler,
		},
		{
			MethodName: "pool_create",
			Handler:    _XRAIDService_PoolCreate_Handler,
		},
		{
			MethodName: "pool_delete",
			Handler:    _XRAIDService_PoolDelete_Handler,
		},
		{
			MethodName: "pool_remove",
			Handler:    _XRAIDService_PoolRemove_Handler,
		},
		{
			MethodName: "pool_show",
			Handler:    _XRAIDService_PoolShow_Handler,
		},
		{
			MethodName: "raid_create",
			Handler:    _XRAIDService_RaidCreate_Handler,
		},
		{
			MethodName: "raid_destroy",
			Handler:    _XRAIDService_RaidDestroy_Handler,
		},
		{
			MethodName: "raid_import_apply",
			Handler:    _XRAIDService_RaidImportApply_Handler,
		},
		{
			MethodName: "raid_import_show",
			Handler:    _XRAIDService_RaidImportShow_Handler,
		},
		{
			MethodName: "raid_init_start",
			Handler:    _XRAIDService_RaidInitStart_Handler,
		},
		{
			MethodName: "raid_init_stop",
			Handler:    _XRAIDService_RaidInitStop_Handler,
		},
		{
			MethodName: "raid_modify",
			Handler:    _XRAIDService_RaidModify_Handler,
		},
		{
			MethodName: "raid_recon_start",
			Handler:    _XRAIDService_RaidReconStart_Handler,
		},
		{
			MethodName: "raid_recon_stop",
			Handler:    _XRAIDService_RaidReconStop_Handler,
		},
		{
			MethodName: "raid_replace",
			Handler:    _XRAIDService_RaidReplace_Handler,
		},
		{
			MethodName: "raid_resize",
			Handler:    _XRAIDService_RaidResize_Handler,
		},
		{
			MethodName: "raid_restore",
			Handler:    _XRAIDService_RaidRestore_Handler,
		},
		{
			MethodName: "raid_restripe_start",
			Handler:    _XRAIDService_RaidRestripeStart_Handler,
		},
		{
			MethodName: "raid_restripe_continue",
			Handler:    _XRAIDService_RaidRestripeContinue_Handler,
		},
		{
			MethodName: "raid_restripe_stop",
			Handler:    _XRAIDService_RaidRestripeStop_Handler,
		},
		{
			MethodName: "raid_show",
			Handler:    _XRAIDService_RaidShow_Handler,
		},
		{
			MethodName: "raid_unload",
			Handler:    _XRAIDService_RaidUnload_Handler,
		},
		{
			MethodName: "settings_auth_modify",
			Handler:    _XRAIDService_SettingsAuthModify_Handler,
		},
		{
			MethodName: "settings_auth_show",
			Handler:    _XRAIDService_SettingsAuthShow_Handler,
		},
		{
			MethodName: "settings_faulty_count_modify",
			Handler:    _XRAIDService_SettingsFaultyCountModify_Handler,
		},
		{
			MethodName: "settings_faulty_count_show",
			Handler:    _XRAIDService_SettingsFaultyCountShow_Handler,
		},
		{
			MethodName: "settings_log_modify",
			Handler:    _XRAIDService_SettingsLogModify_Handler,
		},
		{
			MethodName: "settings_log_show",
			Handler:    _XRAIDService_SettingsLogShow_Handler,
		},
		{
			MethodName: "settings_mail_modify",
			Handler:    _XRAIDService_SettingsMailModify_Handler,
		},
		{
			MethodName: "settings_mail_show",
			Handler:    _XRAIDService_SettingsMailShow_Handler,
		},
		{
			MethodName: "settings_pool_modify",
			Handler:    _XRAIDService_SettingsPoolModify_Handler,
		},
		{
			MethodName: "settings_pool_show",
			Handler:    _XRAIDService_SettingsPoolShow_Handler,
		},
		{
			MethodName: "settings_scanner_modify",
			Handler:    _XRAIDService_SettingsScannerModify_Handler,
		},
		{
			MethodName: "settings_scanner_show",
			Handler:    _XRAIDService_SettingsScannerShow_Handler,
		},
		{
			MethodName: "settings_cluster_modify",
			Handler:    _XRAIDService_SettingsClusterModify_Handler,
		},
		{
			MethodName: "settings_cluster_show",
			Handler:    _XRAIDService_SettingsClusterShow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_xraid.proto",
}
